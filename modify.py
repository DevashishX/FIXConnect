#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 12, 2019 11:30:08 AM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import modify_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    modify_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    modify_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("764x462+271+137")
        top.title("MODIFY")
        top.configure(background="#b2b2b2")
        top.configure(highlightcolor="black")

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.039, rely=0.087,height=25, relwidth=0.257)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")

        self.Entry1_1 = tk.Entry(top)
        self.Entry1_1.place(relx=0.039, rely=0.303,height=25, relwidth=0.257)
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(selectbackground="#c4c4c4")

        self.Entry1_2 = tk.Entry(top)
        self.Entry1_2.place(relx=0.039, rely=0.195,height=25, relwidth=0.257)
        self.Entry1_2.configure(background="white")
        self.Entry1_2.configure(font="TkFixedFont")
        self.Entry1_2.configure(selectbackground="#c4c4c4")

        self.Entry1_1 = tk.Entry(top)
        self.Entry1_1.place(relx=0.039, rely=0.563,height=25, relwidth=0.257)
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(selectbackground="#c4c4c4")

        self.Entry1_3 = tk.Entry(top)
        self.Entry1_3.place(relx=0.039, rely=0.422,height=25, relwidth=0.257)
        self.Entry1_3.configure(background="white")
        self.Entry1_3.configure(font="TkFixedFont")
        self.Entry1_3.configure(selectbackground="#c4c4c4")

        self.Entry1_4 = tk.Entry(top)
        self.Entry1_4.place(relx=0.039, rely=0.758,height=25, relwidth=0.257)
        self.Entry1_4.configure(background="white")
        self.Entry1_4.configure(font="TkFixedFont")
        self.Entry1_4.configure(selectbackground="#c4c4c4")

        self.Symbol_Label = tk.Label(top)
        self.Symbol_Label.place(relx=0.039, rely=0.043, height=20, width=196)
        self.Symbol_Label.configure(activebackground="#f9f9f9")
        self.Symbol_Label.configure(background="#4f4f4f")
        self.Symbol_Label.configure(foreground="#ffffff")
        self.Symbol_Label.configure(text='''Symbol''')
        self.Symbol_Label.configure(width=196)

        self.Size_Label = tk.Label(top)
        self.Size_Label.place(relx=0.039, rely=0.152, height=20, width=196)
        self.Size_Label.configure(activebackground="#f9f9f9")
        self.Size_Label.configure(background="#4f4f4f")
        self.Size_Label.configure(foreground="#ffffff")
        self.Size_Label.configure(text='''Size''')

        self.Client_Label = tk.Label(top)
        self.Client_Label.place(relx=0.039, rely=0.26, height=20, width=196)
        self.Client_Label.configure(activebackground="#f9f9f9")
        self.Client_Label.configure(background="#4f4f4f")
        self.Client_Label.configure(foreground="#ffffff")
        self.Client_Label.configure(text='''Client''')

        self.Exchange_Label = tk.Label(top)
        self.Exchange_Label.place(relx=0.039, rely=0.379, height=20, width=196)
        self.Exchange_Label.configure(activebackground="#f9f9f9")
        self.Exchange_Label.configure(background="#4f4f4f")
        self.Exchange_Label.configure(foreground="#ffffff")
        self.Exchange_Label.configure(text='''Exchange''')

        self.Counter_Party_Label = tk.Label(top)
        self.Counter_Party_Label.place(relx=0.039, rely=0.519, height=20
                , width=196)
        self.Counter_Party_Label.configure(activebackground="#f9f9f9")
        self.Counter_Party_Label.configure(background="#4f4f4f")
        self.Counter_Party_Label.configure(foreground="#ffffff")
        self.Counter_Party_Label.configure(text='''Counter Party''')

        self.TIF_Label = tk.Label(top)
        self.TIF_Label.place(relx=0.039, rely=0.725, height=16, width=196)
        self.TIF_Label.configure(activebackground="#f9f9f9")
        self.TIF_Label.configure(background="#4f4f4f")
        self.TIF_Label.configure(foreground="#ffffff")
        self.TIF_Label.configure(text='''TIF''')

        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.458, rely=0.076,height=25, relwidth=0.257)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(width=196)

        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.452, rely=0.195,height=25, relwidth=0.257)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(selectbackground="#c4c4c4")

        self.Entry4 = tk.Entry(top)
        self.Entry4.place(relx=0.785, rely=0.184,height=25, relwidth=0.191)
        self.Entry4.configure(background="white")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(selectbackground="#c4c4c4")

        self.Entry5 = tk.Entry(top)
        self.Entry5.place(relx=0.452, rely=0.303,height=25, relwidth=0.257)
        self.Entry5.configure(background="white")
        self.Entry5.configure(font="TkFixedFont")
        self.Entry5.configure(selectbackground="#c4c4c4")

        self.Entry6 = tk.Entry(top)
        self.Entry6.place(relx=0.452, rely=0.411,height=25, relwidth=0.257)
        self.Entry6.configure(background="white")
        self.Entry6.configure(font="TkFixedFont")
        self.Entry6.configure(selectbackground="#c4c4c4")

        self.Entry7 = tk.Entry(top)
        self.Entry7.place(relx=0.452, rely=0.758,height=25, relwidth=0.44)
        self.Entry7.configure(background="white")
        self.Entry7.configure(font="TkFixedFont")
        self.Entry7.configure(selectbackground="#c4c4c4")

        self.TIME_IN_FORCE_Label = tk.Label(top)
        self.TIME_IN_FORCE_Label.place(relx=0.0, rely=0.649, height=23
                , width=767)
        self.TIME_IN_FORCE_Label.configure(activebackground="#f9f9f9")
        self.TIME_IN_FORCE_Label.configure(background="#4f4f4f")
        self.TIME_IN_FORCE_Label.configure(font="-family {DejaVu Sans} -size 12")
        self.TIME_IN_FORCE_Label.configure(foreground="#ffffff")
        self.TIME_IN_FORCE_Label.configure(text='''TIME IN FORCE''')

        self._Symbol_Description_Label = tk.Label(top)
        self._Symbol_Description_Label.place(relx=0.458, rely=0.043, height=20
                , width=196)
        self._Symbol_Description_Label.configure(activebackground="#f9f9f9")
        self._Symbol_Description_Label.configure(background="#4f4f4f")
        self._Symbol_Description_Label.configure(foreground="#ffffff")
        self._Symbol_Description_Label.configure(text='''Symbol Description''')

        self.Price_Instruction_Label = tk.Label(top)
        self.Price_Instruction_Label.place(relx=0.452, rely=0.162, height=20
                , width=196)
        self.Price_Instruction_Label.configure(activebackground="#f9f9f9")
        self.Price_Instruction_Label.configure(background="#4f4f4f")
        self.Price_Instruction_Label.configure(foreground="#ffffff")
        self.Price_Instruction_Label.configure(text='''Price Instruction''')

        self.Client_Description_Label = tk.Label(top)
        self.Client_Description_Label.place(relx=0.452, rely=0.26, height=20
                , width=196)
        self.Client_Description_Label.configure(activebackground="#f9f9f9")
        self.Client_Description_Label.configure(background="#4f4f4f")
        self.Client_Description_Label.configure(foreground="#ffffff")
        self.Client_Description_Label.configure(text='''Client Description''')

        self.Account_Label = tk.Label(top)
        self.Account_Label.place(relx=0.452, rely=0.368, height=20, width=196)
        self.Account_Label.configure(activebackground="#f9f9f9")
        self.Account_Label.configure(background="#4f4f4f")
        self.Account_Label.configure(foreground="#ffffff")
        self.Account_Label.configure(text='''Account''')

        self.TIF_Date_Label = tk.Label(top)
        self.TIF_Date_Label.place(relx=0.452, rely=0.714, height=20, width=336)
        self.TIF_Date_Label.configure(activebackground="#f9f9f9")
        self.TIF_Date_Label.configure(background="#4f4f4f")
        self.TIF_Date_Label.configure(foreground="#ffffff")
        self.TIF_Date_Label.configure(text='''TIF Date''')

        self.Limit_Label = tk.Label(top)
        self.Limit_Label.place(relx=0.785, rely=0.141, height=20, width=146)
        self.Limit_Label.configure(activebackground="#f9f9f9")
        self.Limit_Label.configure(background="#4f4f4f")
        self.Limit_Label.configure(foreground="#ffffff")
        self.Limit_Label.configure(text='''Limit''')

        self.OK_Button = ttk.Button(top)
        self.OK_Button.place(relx=0.314, rely=0.887, height=30, width=101)
        self.OK_Button.configure(takefocus="")
        self.OK_Button.configure(text='''OK''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.OK_Button, tooltip_font, '''Press to Submit''', delay=0.5)

        self.Cancel_Button = ttk.Button(top)
        self.Cancel_Button.place(relx=0.537, rely=0.887, height=30, width=101)
        self.Cancel_Button.configure(takefocus="")
        self.Cancel_Button.configure(text='''Cancel''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





